@page
@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer localizer
@model Aimidge.Pages.LoginModel
@{
    ViewData["Title"] = "Login page";
}
<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="~/css/login.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <title>Login Page</title>
</head>

<body id="bootstrap-overrides">
    <div class="container" id="container">
        <div class="form-container sign-up">
            <form>
                <h1>@localizer["account"]</h1>
                <input type="text" id="name" placeholder="@localizer["name"]">
                <input type="text" id="username" placeholder="@localizer["username"]">
                <input type="email" id="email" placeholder="@localizer["registrationEmail"]">
                <input type="password" id="password" placeholder="@localizer["password"]">
                <input type="submit" value="@localizer["signup"]" id="signUpButton" class="button">
                <div id="signup-error" style="color:red;"></div>
            </form>
        </div>
        <div class="form-container sign-in">
            <form method="post">
                <h1>@localizer["signin"]</h1>
                <input type="email" id="logEmail" placeholder="@localizer["loginEmail"]">
                <input type="password" id="logPass" placeholder="@localizer["password"]">
                <input type="submit" value="@localizer["login"]" id="logInButton" class="button">
                <div id="login-error" style="color:red;"></div>
            </form>
        </div>
        <div class="toggle-container">
            <div class="toggle">
                <div class="toggle-panel toggle-left">
                    <h1>@localizer["alreadygot"]</h1>
                    <button class="hidden" id="login">@localizer["signin"]</button>
                </div>
                <div class="toggle-panel toggle-right">
                    <h1>@localizer["welcomeTo"]</h1>
                    <p>@localizer["registerToUse"]</p>
                    <button class="hidden" id="register">@localizer["signup"]</button>
                </div>
            </div>
        </div>
    </div>
    <script>
        document.addEventListener("DOMContentLoaded", async function () {
            document.getElementById('signUpButton').addEventListener('click', async function (event) {
                event.preventDefault();

                // const response = await fetch('api/acc/Encrypt', {
                //     method: 'GET',
                //     data: JSON.stringify({ plainText: document.getElementById('password').value }),
                // });
                // if (response.ok) {
                //     const result = await response.json();

                const formData = {
                    Name: document.getElementById('name').value,
                    Username: document.getElementById('username').value,
                    Email: document.getElementById('email').value,
                    PasswordHash: document.getElementById('password').value
                }

                const errorSignup = document.getElementById('signup-error')
                let messagesSignup = []
                if (!isValidName(document.getElementById('name').value)) {
                    if (window.location.search.includes('culture=en')) {
                        messagesSignup.push('*Name should be at least 3 symbols long!')
                    } else {
                        messagesSignup.push('*Vardas turi būti sudarytas bent iš 3 simbolių!')
                    }
                } else if (!isValidUsername(document.getElementById('username').value)) {
                    if (window.location.search.includes('culture=en')) {
                        messagesSignup.push('*Username must be at least 4 symbols long!')
                    } else {
                        messagesSignup.push('*Slaptyvardis turi būti sudarytas bent iš 4 simbolių!')
                    }
                } else if (!isValidEmail(document.getElementById('email').value)) {
                    if (window.location.search.includes('culture=en')) {
                        messagesSignup.push('*Email is invalid!')
                    } else {
                        messagesSignup.push('*Neteisingas elektroninis paštas!')
                    }
                } else if (!isValidPassword(document.getElementById('password').value)) {
                    if (window.location.search.includes('culture=en')) {
                        messagesSignup.push('*Password must be at least 8 symbols long with at least one uppercase letter and one character or number!')
                    } else {
                        messagesSignup.push('*Slaptažodis turi būti sudarytas bent iš 8 simbolių, turėti bent vieną didžiąją raidę ir skaičių!')
                    }
                } else {
                    const response = await fetch('api/accounts/Add', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formData)
                    });

                    if (response.ok) {
                        const result = await response.text();
                        if (result === "ok") {
                            window.location.href = "/Generator";
                        } else if (result === "UserExists") {
                            if (window.location.search.includes('culture=en')) {
                                messagesSignup.push('*User with this email address already exists!')
                            } else {
                                messagesSignup.push('*Vartotojas su šiuo elektroniniu paštu jau egzistuoja!')
                            }
                        }
                    } else {
                        if (window.location.search.includes('culture=en')) {
                            alert("Internal server error occurred!");
                        } else {
                            alert("Įvyko vidinė serverio klaida!");
                        }
                    }
                }

                if (messagesSignup.length > 0) {
                    event.preventDefault();
                    errorSignup.innerText = messagesSignup.join(', ')
                }
                function isValidUsername(username) {
                    return username.length >= 4;
                }
            });

            document.getElementById('logInButton').addEventListener('click', async function (event) {
                event.preventDefault();
                const formData = {
                    Email: document.getElementById('logEmail').value,
                    PasswordHash: document.getElementById('logPass').value
                }

                const errorLogin = document.getElementById('login-error')
                let messagesLogin = []
                if (!isValidEmail(document.getElementById('logEmail').value) && !isValidName(document.getElementById('logEmail').value)) {
                    if (window.location.search.includes('culture=en')) {
                        messagesLogin.push('*Email or username is invalid!')
                    } else {
                        messagesLogin.push('*Neteisingas elektroninis paštas arba vartotojo vardas!')
                    }
                } else if (!isValidPassword(document.getElementById('logPass').value)) {
                    if (window.location.search.includes('culture=en')) {
                        messagesLogin.push('*Password must be at least 8 symbols long with at least one uppercase letter and one character or number!')
                    } else {
                        messagesLogin.push('*Slaptažodis turi būti sudarytas bent iš 8 simbolių, turėti bent vieną didžiąją raidę ir skaičių!')
                    }
                } else {
                    const response = await fetch('api/accounts/Auth', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formData)
                    });

                    if (response.ok) {
                        const result = await response.text();
                        if (result === "ok") {
                            window.location.href = "/Generator";
                        } else if (result === "IncorrectValues") {
                            if (window.location.search.includes('culture=en')) {
                                messagesLogin.push('*Incorrect email or password!')
                            } else {
                                messagesLogin.push('*Neteisingas elektroninis paštas arba slapyvardis!')
                            }
                        }
                    } else {
                        if (window.location.search.includes('culture=en')) {
                            alert("Internal server error occured!");
                        } else {
                            alert("Įvyko vidinė serverio klaida!");
                        }
                    }
                }
                if (messagesLogin.length > 0) {
                    event.preventDefault();
                    errorLogin.innerText = messagesLogin.join(', ')
                }
            });
            function isValidName(name) {
                return /^[A-Za-z]{2,}$/.test(name);
            }
            function isValidEmail(email) {
                const regex = /^[a-zA-Z0-9._%+-]+@@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
                return regex.test(email);
            }
            function isValidPassword(password) {
                return /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{8,}$/.test(password);
            }
        });
    </script>
    <script src="~/js/script.js"></script>
</body>

</html>
