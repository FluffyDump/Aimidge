@page
@model Aimidge.Pages.GeneratorModel
@{
    ViewData["Title"] = "Home page";
}

<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" href="~/css/generator.css">
<script src="https://unpkg.com/boxicons@2.1.4/dist/boxicons.js"></script>
<link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
<title>Document</title>

<body>
    <nav class="sidebar">
        <div class="sidebar-inner">
            <header class="sidebar-header">
                <button type="button" class="sidebar-burger" onclick="toggleSidebar()">
                    <i class='bx bx-menu'></i>
                </button>
                <img src="logo.png" alt="" class="sidebar-logo">
                <span class="sidebar-name-logo">AIMIDGE</span>
            </header>
            <nav class="sidebar-menu">
                <button type="button">
                    <i class='bx bx-home' onclick="redirectToHome()"></i>
                    <span><a asp-area="" asp-page="/Generator" class="a-remover">Home</a></span>
                </button>
                <button type="button">
                    <i class='bx bx-info-circle' onclick="redirectToAbout()"></i>
                    <span><a asp-area="" asp-page="/AboutInside" class="a-remover">About</a></span>
                </button>
            </nav>
        </div>
    </nav>
    <script type="text/javascript">
        const toggleSidebar = () => document.body.classList.toggle("open");
    </script>
    <script>
        function redirectToAbout() {
            window.location.href = "/AboutInside";
        }
    </script>
    <script>
        function redirectToHome() {
            window.location.href = "/Generator";
        }
    </script>
    <div class="try-it">
        <div class="model-card">
            <div class="model-card-container">
                <div class="model-card-col">

                    <div class="outline-try-it">
                        <label for="prompt">Enter your prompt!</label><br />
                    </div>

                    <span class="model-input-col">
                        <textarea type="text" id="prompt" name="prompt" placeholder="Enter your prompt"
                            spellcheck="false" class="area"></textarea>
                    </span>

                    <div class="outline-try-it">
                        <label for="resolution">Select resolution:</label><br />
                    </div>
                    <div class="image-models-container">
                        <select class="selector" id="resolution" name="resolution">
                            <option value="100x100">100x100</option>
                            <option value="150x150">150x150</option>
                            <option value="320x240">320x240</option>
                            <option value="400x300">400x300</option>
                            <option value="512x512">512x512</option>
                        </select><br />
                    </div>


                    <div class="edit-buttons-container">
                        <button id="submitButton" type="button" class="buttons">Submit</button><br />
                        <button id="clearButton" type="button" class="buttons">Clear</button>
                    </div>
                    <div id="generatedPicturesContainer"></div>
                </div>
                <div class="model-card-col">

                    <div id="promptImages"></div>

                    <div id="loadingSpinner" style="display: none;">
                        <div id="progress">
                            <div id="loadingPercentage"></div>
                        </div>
                    </div>

                    <div class="edit-buttons-container">
                        <button id="download-model-image" class="buttons">Download</button>
                    </div>
                </div>
            </div>
        </div>=
        <script>
            let refreshInterval;
            document.getElementById('submitButton').addEventListener('click', async function () {
                const promptText = document.getElementById('prompt').value;
                const resolution = document.getElementById('resolution').value;

                document.getElementById('loadingSpinner').style.display = 'block';

                const existingCookie = await fetch('api/web/GetCookie', {
                    method: 'POST'
                }).then(async resp => {
                    const respText = await resp.text();
                    if (respText === '404') {
                        await fetch('api/web/SetCookie', {
                            method: 'POST'
                        }).then(async setResp => {
                            if (setResp.ok) {
                                processPrompt();
                            }
                        })
                    } else if (respText === 'ok') {
                        processPrompt();
                    } else {
                        alert("Unable to check cookies!");
                    }
                });


                async function processPrompt() {
                    refreshInterval = setInterval(getBar, 700);
                    const response = await fetch('api/web/GetPrompt', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ prompt: promptText, resolution: resolution })
                    });

                    if (response.ok) {
                        const data = await response.json();
                        const img = document.createElement('img');
                        img.src = 'data:image/jpg;base64,' + data.image;
                        img.style.margin = '10px';

                        if (document.getElementById('promptImages').hasChildNodes) {
                            const promptImages = document.getElementById('promptImages');
                            while (promptImages.firstChild) {
                                promptImages.removeChild(promptImages.firstChild);
                            }
                        }

                        document.getElementById('promptImages').appendChild(img.cloneNode(true));
                        document.getElementById('generatedPicturesContainer').appendChild(img);
                        document.getElementById('loadingSpinner').style.display = 'none';
                    } else {
                        console.error(response.statusText);
                        document.getElementById('loadingSpinner').style.display = 'none';
                    }
                }

                async function getBar(percentage, progress) {
                    const response = await fetch('api/web/GetProgress', {
                        method: 'GET'
                    });

                    if (response.ok) {
                        const percentage = parseInt(await response.text());
                        const progress = document.getElementById('progress');

                        progress.style.width = percentage + '%';
                        loadingPercentage.textContent = percentage + '%';

                        if (percentage >= 85) {
                            clearInterval(refreshInterval);
                            progress.style.width = 100 + '%';
                            loadingPercentage.textContent = 100 + '%';
                            setTimeout(function() {
                                progress.style.width = 0 + '%';
                                loadingPercentage.textContent = 0 + '%';
                            }, 100000);
                        }
                    }
                }
            });

            document.getElementById('download-model-image').addEventListener('click', async function () {
                var imageElement = document.getElementById("promptImages").firstChild;

                var canvas = document.createElement("canvas");
                canvas.width = imageElement.width;
                canvas.height = imageElement.height;

                var ctx = canvas.getContext("2d");
                ctx.drawImage(imageElement, 0, 0);

                var anchor = document.createElement("a");
                anchor.href = canvas.toDataURL("image/jpeg");
                anchor.download = "Image.jpg";
                anchor.click();
            });

            document.getElementById('clearButton').addEventListener('click', function () {
                const promptImages = document.getElementById('promptImages');

                while (promptImages.firstChild) {
                    promptImages.removeChild(promptImages.firstChild);
                }

                const promptImagesTwo = document.getElementById('generatedPicturesContainer');
                
                while (promptImagesTwo.firstChild) {
                    promptImagesTwo.removeChild(promptImagesTwo.firstChild);
                }
            });
        </script>
    </div>
    <!--   <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2024 - Aimidge - <a asp-area="" asp-page="/Privacy">Privacy</a>
        </div>
    </footer> -->
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
</body>